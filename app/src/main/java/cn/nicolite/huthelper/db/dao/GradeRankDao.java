package cn.nicolite.huthelper.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.nicolite.huthelper.model.bean.GradeRank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE_RANK".
*/
public class GradeRankDao extends AbstractDao<GradeRank, Long> {

    public static final String TABLENAME = "GRADE_RANK";

    /**
     * Properties of entity GradeRank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Xn = new Property(2, String.class, "xn", false, "XN");
        public final static Property Xq = new Property(3, String.class, "xq", false, "XQ");
        public final static Property Zhjd = new Property(4, String.class, "zhjd", false, "ZHJD");
        public final static Property Bjrank = new Property(5, String.class, "bjrank", false, "BJRANK");
        public final static Property Zyrank = new Property(6, String.class, "zyrank", false, "ZYRANK");
        public final static Property Pjf = new Property(7, String.class, "pjf", false, "PJF");
        public final static Property IsXq = new Property(8, boolean.class, "isXq", false, "IS_XQ");
    }


    public GradeRankDao(DaoConfig config) {
        super(config);
    }
    
    public GradeRankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE_RANK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"XN\" TEXT," + // 2: xn
                "\"XQ\" TEXT," + // 3: xq
                "\"ZHJD\" TEXT," + // 4: zhjd
                "\"BJRANK\" TEXT," + // 5: bjrank
                "\"ZYRANK\" TEXT," + // 6: zyrank
                "\"PJF\" TEXT," + // 7: pjf
                "\"IS_XQ\" INTEGER NOT NULL );"); // 8: isXq
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE_RANK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GradeRank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String xn = entity.getXn();
        if (xn != null) {
            stmt.bindString(3, xn);
        }
 
        String xq = entity.getXq();
        if (xq != null) {
            stmt.bindString(4, xq);
        }
 
        String zhjd = entity.getZhjd();
        if (zhjd != null) {
            stmt.bindString(5, zhjd);
        }
 
        String bjrank = entity.getBjrank();
        if (bjrank != null) {
            stmt.bindString(6, bjrank);
        }
 
        String zyrank = entity.getZyrank();
        if (zyrank != null) {
            stmt.bindString(7, zyrank);
        }
 
        String pjf = entity.getPjf();
        if (pjf != null) {
            stmt.bindString(8, pjf);
        }
        stmt.bindLong(9, entity.getIsXq() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GradeRank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String xn = entity.getXn();
        if (xn != null) {
            stmt.bindString(3, xn);
        }
 
        String xq = entity.getXq();
        if (xq != null) {
            stmt.bindString(4, xq);
        }
 
        String zhjd = entity.getZhjd();
        if (zhjd != null) {
            stmt.bindString(5, zhjd);
        }
 
        String bjrank = entity.getBjrank();
        if (bjrank != null) {
            stmt.bindString(6, bjrank);
        }
 
        String zyrank = entity.getZyrank();
        if (zyrank != null) {
            stmt.bindString(7, zyrank);
        }
 
        String pjf = entity.getPjf();
        if (pjf != null) {
            stmt.bindString(8, pjf);
        }
        stmt.bindLong(9, entity.getIsXq() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GradeRank readEntity(Cursor cursor, int offset) {
        GradeRank entity = new GradeRank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // xq
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zhjd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bjrank
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zyrank
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pjf
            cursor.getShort(offset + 8) != 0 // isXq
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GradeRank entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXq(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZhjd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBjrank(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZyrank(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPjf(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsXq(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GradeRank entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GradeRank entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GradeRank entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
