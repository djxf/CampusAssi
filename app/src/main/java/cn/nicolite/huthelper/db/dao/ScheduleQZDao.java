package cn.nicolite.huthelper.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.nicolite.huthelper.model.bean.ScheduleQZ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULE_QZ".
*/
public class ScheduleQZDao extends AbstractDao<ScheduleQZ, Void> {

    public static final String TABLENAME = "SCHEDULE_QZ";

    /**
     * Properties of entity ScheduleQZ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Jsxm = new Property(0, String.class, "jsxm", false, "JSXM");
        public final static Property Jsmc = new Property(1, String.class, "jsmc", false, "JSMC");
        public final static Property Jssj = new Property(2, String.class, "jssj", false, "JSSJ");
        public final static Property Kssj = new Property(3, String.class, "kssj", false, "KSSJ");
        public final static Property Kkzc = new Property(4, String.class, "kkzc", false, "KKZC");
        public final static Property Kcsj = new Property(5, String.class, "kcsj", false, "KCSJ");
        public final static Property Kcmc = new Property(6, String.class, "kcmc", false, "KCMC");
        public final static Property Sjbz = new Property(7, String.class, "sjbz", false, "SJBZ");
    }


    public ScheduleQZDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleQZDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE_QZ\" (" + //
                "\"JSXM\" TEXT," + // 0: jsxm
                "\"JSMC\" TEXT," + // 1: jsmc
                "\"JSSJ\" TEXT," + // 2: jssj
                "\"KSSJ\" TEXT," + // 3: kssj
                "\"KKZC\" TEXT," + // 4: kkzc
                "\"KCSJ\" TEXT," + // 5: kcsj
                "\"KCMC\" TEXT," + // 6: kcmc
                "\"SJBZ\" TEXT);"); // 7: sjbz
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE_QZ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScheduleQZ entity) {
        stmt.clearBindings();
 
        String jsxm = entity.getJsxm();
        if (jsxm != null) {
            stmt.bindString(1, jsxm);
        }
 
        String jsmc = entity.getJsmc();
        if (jsmc != null) {
            stmt.bindString(2, jsmc);
        }
 
        String jssj = entity.getJssj();
        if (jssj != null) {
            stmt.bindString(3, jssj);
        }
 
        String kssj = entity.getKssj();
        if (kssj != null) {
            stmt.bindString(4, kssj);
        }
 
        String kkzc = entity.getKkzc();
        if (kkzc != null) {
            stmt.bindString(5, kkzc);
        }
 
        String kcsj = entity.getKcsj();
        if (kcsj != null) {
            stmt.bindString(6, kcsj);
        }
 
        String kcmc = entity.getKcmc();
        if (kcmc != null) {
            stmt.bindString(7, kcmc);
        }
 
        String sjbz = entity.getSjbz();
        if (sjbz != null) {
            stmt.bindString(8, sjbz);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScheduleQZ entity) {
        stmt.clearBindings();
 
        String jsxm = entity.getJsxm();
        if (jsxm != null) {
            stmt.bindString(1, jsxm);
        }
 
        String jsmc = entity.getJsmc();
        if (jsmc != null) {
            stmt.bindString(2, jsmc);
        }
 
        String jssj = entity.getJssj();
        if (jssj != null) {
            stmt.bindString(3, jssj);
        }
 
        String kssj = entity.getKssj();
        if (kssj != null) {
            stmt.bindString(4, kssj);
        }
 
        String kkzc = entity.getKkzc();
        if (kkzc != null) {
            stmt.bindString(5, kkzc);
        }
 
        String kcsj = entity.getKcsj();
        if (kcsj != null) {
            stmt.bindString(6, kcsj);
        }
 
        String kcmc = entity.getKcmc();
        if (kcmc != null) {
            stmt.bindString(7, kcmc);
        }
 
        String sjbz = entity.getSjbz();
        if (sjbz != null) {
            stmt.bindString(8, sjbz);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ScheduleQZ readEntity(Cursor cursor, int offset) {
        ScheduleQZ entity = new ScheduleQZ( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // jsxm
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jsmc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jssj
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kssj
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kkzc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // kcsj
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // kcmc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // sjbz
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScheduleQZ entity, int offset) {
        entity.setJsxm(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJsmc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJssj(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKssj(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKkzc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKcsj(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKcmc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSjbz(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ScheduleQZ entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ScheduleQZ entity) {
        return null;
    }

    @Override
    public boolean hasKey(ScheduleQZ entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
