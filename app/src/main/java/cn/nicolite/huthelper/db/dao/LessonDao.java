package cn.nicolite.huthelper.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.nicolite.huthelper.model.bean.Lesson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESSON".
*/
public class LessonDao extends AbstractDao<Lesson, Long> {

    public static final String TABLENAME = "LESSON";

    /**
     * Properties of entity Lesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Dsz = new Property(2, int.class, "dsz", false, "DSZ");
        public final static Property Xqj = new Property(3, String.class, "xqj", false, "XQJ");
        public final static Property Djj = new Property(4, String.class, "djj", false, "DJJ");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Teacher = new Property(6, String.class, "teacher", false, "TEACHER");
        public final static Property Room = new Property(7, String.class, "room", false, "ROOM");
        public final static Property Zs = new Property(8, String.class, "zs", false, "ZS");
        public final static Property AddByUser = new Property(9, boolean.class, "addByUser", false, "ADD_BY_USER");
    }


    public LessonDao(DaoConfig config) {
        super(config);
    }
    
    public LessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DSZ\" INTEGER NOT NULL ," + // 2: dsz
                "\"XQJ\" TEXT," + // 3: xqj
                "\"DJJ\" TEXT," + // 4: djj
                "\"NAME\" TEXT," + // 5: name
                "\"TEACHER\" TEXT," + // 6: teacher
                "\"ROOM\" TEXT," + // 7: room
                "\"ZS\" TEXT," + // 8: zs
                "\"ADD_BY_USER\" INTEGER NOT NULL );"); // 9: addByUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getDsz());
 
        String xqj = entity.getXqj();
        if (xqj != null) {
            stmt.bindString(4, xqj);
        }
 
        String djj = entity.getDjj();
        if (djj != null) {
            stmt.bindString(5, djj);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(7, teacher);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(8, room);
        }
 
        String zs = entity.getZs();
        if (zs != null) {
            stmt.bindString(9, zs);
        }
        stmt.bindLong(10, entity.getAddByUser() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getDsz());
 
        String xqj = entity.getXqj();
        if (xqj != null) {
            stmt.bindString(4, xqj);
        }
 
        String djj = entity.getDjj();
        if (djj != null) {
            stmt.bindString(5, djj);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(7, teacher);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(8, room);
        }
 
        String zs = entity.getZs();
        if (zs != null) {
            stmt.bindString(9, zs);
        }
        stmt.bindLong(10, entity.getAddByUser() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Lesson readEntity(Cursor cursor, int offset) {
        Lesson entity = new Lesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getInt(offset + 2), // dsz
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // xqj
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // djj
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // teacher
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // room
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zs
            cursor.getShort(offset + 9) != 0 // addByUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDsz(cursor.getInt(offset + 2));
        entity.setXqj(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDjj(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTeacher(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRoom(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZs(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddByUser(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Lesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Lesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lesson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
