package cn.nicolite.huthelper.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.nicolite.huthelper.model.bean.GradeSum;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE_SUM".
*/
public class GradeSumDao extends AbstractDao<GradeSum, Long> {

    public static final String TABLENAME = "GRADE_SUM";

    /**
     * Properties of entity GradeSum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Zxf = new Property(2, String.class, "zxf", false, "ZXF");
        public final static Property Gks = new Property(3, String.class, "gks", false, "GKS");
        public final static Property Wdxf = new Property(4, String.class, "wdxf", false, "WDXF");
        public final static Property Zhjd = new Property(5, String.class, "zhjd", false, "ZHJD");
        public final static Property Pjf = new Property(6, String.class, "pjf", false, "PJF");
    }


    public GradeSumDao(DaoConfig config) {
        super(config);
    }
    
    public GradeSumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE_SUM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ZXF\" TEXT," + // 2: zxf
                "\"GKS\" TEXT," + // 3: gks
                "\"WDXF\" TEXT," + // 4: wdxf
                "\"ZHJD\" TEXT," + // 5: zhjd
                "\"PJF\" TEXT);"); // 6: pjf
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE_SUM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GradeSum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String zxf = entity.getZxf();
        if (zxf != null) {
            stmt.bindString(3, zxf);
        }
 
        String gks = entity.getGks();
        if (gks != null) {
            stmt.bindString(4, gks);
        }
 
        String wdxf = entity.getWdxf();
        if (wdxf != null) {
            stmt.bindString(5, wdxf);
        }
 
        String zhjd = entity.getZhjd();
        if (zhjd != null) {
            stmt.bindString(6, zhjd);
        }
 
        String pjf = entity.getPjf();
        if (pjf != null) {
            stmt.bindString(7, pjf);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GradeSum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String zxf = entity.getZxf();
        if (zxf != null) {
            stmt.bindString(3, zxf);
        }
 
        String gks = entity.getGks();
        if (gks != null) {
            stmt.bindString(4, gks);
        }
 
        String wdxf = entity.getWdxf();
        if (wdxf != null) {
            stmt.bindString(5, wdxf);
        }
 
        String zhjd = entity.getZhjd();
        if (zhjd != null) {
            stmt.bindString(6, zhjd);
        }
 
        String pjf = entity.getPjf();
        if (pjf != null) {
            stmt.bindString(7, pjf);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GradeSum readEntity(Cursor cursor, int offset) {
        GradeSum entity = new GradeSum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zxf
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gks
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wdxf
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zhjd
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // pjf
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GradeSum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZxf(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGks(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWdxf(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZhjd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPjf(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GradeSum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GradeSum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GradeSum entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
