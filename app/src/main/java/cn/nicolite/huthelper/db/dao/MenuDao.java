package cn.nicolite.huthelper.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.nicolite.huthelper.model.bean.Menu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU".
*/
public class MenuDao extends AbstractDao<Menu, Long> {

    public static final String TABLENAME = "MENU";

    /**
     * Properties of entity Menu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property ImgId = new Property(2, int.class, "imgId", false, "IMG_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property IsMain = new Property(6, boolean.class, "isMain", false, "IS_MAIN");
        public final static Property UserId = new Property(7, String.class, "userId", false, "USER_ID");
    }


    public MenuDao(DaoConfig config) {
        super(config);
    }
    
    public MenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"IMG_ID\" INTEGER NOT NULL ," + // 2: imgId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"TITLE\" TEXT," + // 4: title
                "\"PATH\" TEXT," + // 5: path
                "\"IS_MAIN\" INTEGER NOT NULL ," + // 6: isMain
                "\"USER_ID\" TEXT);"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Menu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getImgId());
        stmt.bindLong(4, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getIsMain() ? 1L: 0L);
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Menu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getImgId());
        stmt.bindLong(4, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getIsMain() ? 1L: 0L);
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Menu readEntity(Cursor cursor, int offset) {
        Menu entity = new Menu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // index
            cursor.getInt(offset + 2), // imgId
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.getShort(offset + 6) != 0, // isMain
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Menu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setImgId(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsMain(cursor.getShort(offset + 6) != 0);
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Menu entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Menu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Menu entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
